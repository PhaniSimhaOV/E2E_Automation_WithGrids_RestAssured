#!usr/bin/groovy
library identifier:"esqm-automation-serenity-plugin@master",
    retriever: modernSCM([
    $class: 'GitSCMSource',
    remote:'https://github.com/LazySaif20/E2E_Automation_WithGrids_RestAssured.git'
    ])

def git_credentials_id=''
def gitURL='https://github.com/LazySaif20/E2E_Automation_WithGrids_RestAssured.git'
def gitBranch='testBooking'

def scheduleBuild=''
def emailTo=''

pipeline {
    agent any
    triggers {
        // Trigger the job every 2 hours
        cron('H 0,2,4,6,8,10,12,14,16,18,20,22 * * *')  // Every 2 hours
    }
    parameters{
        choice(choices:"chrome\nie",descripton: "Browser to run test", name:'browserName')
        choice(choices:"true\nfalse",descripton: 'Perform sonar scan',name:'sonarscan')
    }
    agent any
    triggers{
        githubPush()
    }
    options{
        buildDiscarder(logRotator(numToKeepStr: '20',daysToKeepStr:'30'))
        timeout(time:60,unit:'MINUTES')
    }
    stages{
        stage('Run Smoke Test'){
            parallel{
                stage('Run each test'){
                    steps{
                        script{
                            try{
                                gitCheckout(gitURL,gitBranch,git_credentials_id)
                                sh 'chmod +x gradlew;./gradlew runRegression --browserName='+"${params.browserName}"+''
                            }catch(Exception e){
                                echo "Caught Error: ${e}"
                                sh "exit 1"
                            }finally{
                                gradleTest.publishReport("Cucumber-Report","index.html","reports")
                            }
                        }
                    }
                }
            }
        }
    }
    post{
        success{
            echo "All stages passed"
        }
        failure{
            step([$class:'ClaimPublisher'])
        }
        always{
            script{
                currentBuild.displayName="${BUILD_NUMBER}+${params.TypeOfTesting}+${cuurentBuild.currentResult}"
            }
        }
        cleanWs()s
    }

}
